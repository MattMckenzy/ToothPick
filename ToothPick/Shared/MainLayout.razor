@inject IJSRuntime JSRuntime
@inject ToothPickContext ToothPickContext
@inherits LayoutComponentBase

<div class="modal fade" id="messageModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@MessageModalHeaderTitle</h5>
                @if (CancelFunction != null)
                {
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick=CancelFunction>
                    <span aria-hidden="true">&times;</span>
                </button>
                }
                else
                {
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                }
            </div>
            <div class="modal-body">
                <p>@MessageModalMessage</p>
            </div>
            <div class="modal-footer">
                @if (ConfirmFunction != null)
                {
                <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick=ConfirmFunction>@ConfirmButton</button>
                }
                @if (RefuseFunction != null)
                {
                <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick=RefuseFunction>@RefuseButton</button>
                }
                @if (CancelFunction != null)
                {
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick=CancelFunction>@CancelButton</button>
                }
                else
                {
                <button type="button" class="btn btn-secondary" data-dismiss="modal">@CancelButton</button>
                }
            </div>
        </div>
    </div>
</div>

<header>
    <NavMenu />
</header>

<CascadingValue Value="StopWaitingCallback" Name="StopWaitingCallback">
    <CascadingValue Value="StopProcessingCallback" Name="StopProcessingCallback">
        <CascadingValue Value="StopSeriesCallback">
            <CascadingValue Value="SaveTrackingCallback">
                <CascadingValue Value="ImportFileCallback">
                    <CascadingValue Value="DeleteItemCallback">
                        <div class="container">
                            <main role="main" class="pb-3">
                                @Body
                            </main>
                        </div>
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

@code {

    private string MessageModalHeaderTitle = string.Empty;
    private string MessageModalMessage = string.Empty;
    private string ConfirmButton = "Yes";
    private string RefuseButton = "No";
    private string CancelButton = "Cancel";

    private Func<Task> ConfirmFunction = null;
    private Func<Task> RefuseFunction = null;
    private Func<Task> CancelFunction = null;

    public EventCallback<CancellationTokenSource> StopWaitingCallback { get; set; }
    public EventCallback<CancellationTokenSource> StopProcessingCallback { get; set; }
    public EventCallback<Status> StopSeriesCallback { get; set; }
    public EventCallback<Download> SaveTrackingCallback { get; set; }
    public EventCallback<(string Title, string Message)> ImportFileCallback { get; set; }
    public EventCallback<(string Title, string Message, Func<Task> ConfirmFunction)> DeleteItemCallback { get; set; }

    protected override Task OnInitializedAsync()
    {
        StopWaitingCallback = new EventCallback<CancellationTokenSource>(this, (Func<CancellationTokenSource, Task>)StopWaiting);
        StopProcessingCallback = new EventCallback<CancellationTokenSource>(this, (Func<CancellationTokenSource, Task>)StopProcessing);
        StopSeriesCallback = new EventCallback<Status>(this, (Func<Status, Task>)StopSeries);
        SaveTrackingCallback = new EventCallback<Download>(this, (Func<Download, Task>)SaveTracking);
        ImportFileCallback = new EventCallback<(string Title, string Message)>(this, (Func<(string Title, string Message), Task>)ImportFile);
        DeleteItemCallback = new EventCallback<(string Title, string Message, Func<Task> ConfirmFunction)>(this, (Func<(string Title, string Message, Func<Task> ConfirmFunction), Task>)DeleteItem);
        return base.OnInitializedAsync();
    }

    public async Task StopWaiting(CancellationTokenSource cancellationTokenSource)
    {
        MessageModalHeaderTitle = "Stop the wait and begin processing immediately?";
        MessageModalMessage = $"The next round of processing will immediately begin.";

        Task confirmFunction()
        {
            cancellationTokenSource.Cancel();

            return Task.CompletedTask;
        }

        await ShowMessageModal(MessageModalHeaderTitle, MessageModalMessage, confirmFunction: confirmFunction);
    }

    public async Task StopProcessing(CancellationTokenSource cancellationTokenSource)
    {
        MessageModalHeaderTitle = "Cancel all processing activities?";
        MessageModalMessage = $"This round of processing will be canceled and will resume after the the specified wait time.";

        Task confirmFunction()
        {
            cancellationTokenSource.Cancel();

            return Task.CompletedTask;
        }

        await ShowMessageModal(MessageModalHeaderTitle, MessageModalMessage, confirmFunction: confirmFunction);
    }

    public async Task StopSeries(Status status)
    {
        MessageModalHeaderTitle = $"Cancel processing the serie: {status.Serie.Name}?";
        MessageModalMessage = $"This serie will not be processed during this round of processing and will be processed again in the next round.";

        Task confirmFunction()
        {
            status.SerieCancellationTokenSource.Cancel();

            return Task.CompletedTask;
        }

        await ShowMessageModal(MessageModalHeaderTitle, MessageModalMessage, confirmFunction: confirmFunction);
    }

    public async Task SaveTracking(Download download)
    {
        MessageModalHeaderTitle = "Cancel media download and save tracking?";
        MessageModalMessage = $"The download of the media, {download.Media.Title}, will be canceled. Would you like to also save the media tracking so it will never download again?";

        async Task confirmFunction()
        {
            download.DownloadCancellationTokenSource.Cancel();

            if ((await ToothPickContext.FindAsync<Media>(download.Media.LibraryName, download.Media.SerieName, download.Media.Location)) == null)
            {
                ToothPickContext.Add(download.Media);
                await ToothPickContext.SaveChangesAsync();
            }
        }

        Task refuseFunction()
        {
            download.DownloadCancellationTokenSource.Cancel();
            return Task.CompletedTask;
        }


        await ShowMessageModal(MessageModalHeaderTitle, MessageModalMessage, confirmFunction: confirmFunction, refuseFunction: refuseFunction);
    }

    public async Task ImportFile((string Title, string Message) item)
    {
        await ShowMessageModal(item.Title, item.Message, cancelButton: "Ok");
    }

    public async Task DeleteItem((string Title, string Message, Func<Task> ConfirmFunction) item)
    {
        await ShowMessageModal(item.Title, item.Message, confirmButton: "Delete", confirmFunction: item.ConfirmFunction);
    }

    private async Task ShowMessageModal(string title, string message, string confirmButton = "Yes", string refuseButton = "No", string cancelButton = "Cancel", Func<Task> confirmFunction = null, Func<Task> refuseFunction = null, Func<Task> cancelFunction = null)
    {
        await Task.Delay(500);

        MessageModalHeaderTitle = title;
        MessageModalMessage = message;
        ConfirmButton = confirmButton;
        RefuseButton = refuseButton;
        CancelButton = cancelButton;
        ConfirmFunction = confirmFunction;
        RefuseFunction = refuseFunction;
        CancelFunction = cancelFunction;

        await JSRuntime.InvokeVoidAsync("modals.showMessageModal");
    }
    }
