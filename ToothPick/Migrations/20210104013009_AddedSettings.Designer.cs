// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToothPick.Models;

namespace ToothPick.Migrations
{
    [DbContext(typeof(ToothPickContext))]
    [Migration("20210104013009_AddedSettings")]
    partial class AddedSettings
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("ToothPick.Models.Library", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("ToothPick.Models.Location", b =>
                {
                    b.Property<string>("LibraryName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SerieName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("LibraryName", "SerieName", "Url");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ToothPick.Models.Media", b =>
                {
                    b.Property<string>("LibraryName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SerieName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<float?>("Duration")
                        .HasColumnType("REAL");

                    b.Property<string>("ThumbnailLocation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LibraryName", "SerieName", "Location");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("ToothPick.Models.Serie", b =>
                {
                    b.Property<string>("LibraryName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("LibraryName", "Name");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("ToothPick.Models.Setting", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Environment")
                        .HasColumnType("TEXT");

                    b.HasKey("Name", "Environment");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Name = "Environment",
                            Environment = "Default"
                        },
                        new
                        {
                            Name = "ToothPickEnabled",
                            Environment = "Default"
                        },
                        new
                        {
                            Name = "ParallelChromes",
                            Environment = "Debug"
                        },
                        new
                        {
                            Name = "ParallelChromes",
                            Environment = "Production"
                        },
                        new
                        {
                            Name = "ParallelDownloads",
                            Environment = "Debug"
                        },
                        new
                        {
                            Name = "ParallelDownloads",
                            Environment = "Production"
                        },
                        new
                        {
                            Name = "ChromeDriverLocation",
                            Environment = "Debug"
                        },
                        new
                        {
                            Name = "ChromeDriverLocation",
                            Environment = "Production"
                        },
                        new
                        {
                            Name = "FFMPEGLocation",
                            Environment = "Debug"
                        },
                        new
                        {
                            Name = "FFMPEGLocation",
                            Environment = "Production"
                        },
                        new
                        {
                            Name = "YoutubeDLLocation",
                            Environment = "Debug"
                        },
                        new
                        {
                            Name = "YoutubeDLLocation",
                            Environment = "Production"
                        },
                        new
                        {
                            Name = "UserAgent",
                            Environment = "Default"
                        },
                        new
                        {
                            Name = "DownloadPath",
                            Environment = "Debug"
                        },
                        new
                        {
                            Name = "DownloadPath",
                            Environment = "Production"
                        },
                        new
                        {
                            Name = "ScanDelayMinutes",
                            Environment = "Debug"
                        },
                        new
                        {
                            Name = "ScanDelayMinutes",
                            Environment = "Production"
                        },
                        new
                        {
                            Name = "SkipNewSeries",
                            Environment = "Debug"
                        },
                        new
                        {
                            Name = "SkipNewSeries",
                            Environment = "Production"
                        });
                });

            modelBuilder.Entity("ToothPick.Models.Location", b =>
                {
                    b.HasOne("ToothPick.Models.Library", "Library")
                        .WithMany("Locations")
                        .HasForeignKey("LibraryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToothPick.Models.Serie", "Serie")
                        .WithMany("Locations")
                        .HasForeignKey("LibraryName", "SerieName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("ToothPick.Models.Media", b =>
                {
                    b.HasOne("ToothPick.Models.Library", "Library")
                        .WithMany("Medias")
                        .HasForeignKey("LibraryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToothPick.Models.Serie", "Serie")
                        .WithMany("Medias")
                        .HasForeignKey("LibraryName", "SerieName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("ToothPick.Models.Serie", b =>
                {
                    b.HasOne("ToothPick.Models.Library", "Library")
                        .WithMany("Series")
                        .HasForeignKey("LibraryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("ToothPick.Models.Library", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Medias");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("ToothPick.Models.Serie", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Medias");
                });
#pragma warning restore 612, 618
        }
    }
}
