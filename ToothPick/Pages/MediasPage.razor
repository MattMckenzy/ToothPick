@page "/medias"

@inject ToothPickContext ToothPickContext
@inject IJSRuntime JS

@using Newtonsoft.Json
@using System.IO
@using System.Text
@using System.Text.RegularExpressions

<h2>Medias</h2>

@if (medias == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex flex-row bd-highlight mb-2">
        <button !@onclick="ExportMedias">
            Export All Medias
        </button>
    </div>

    <div class="d-flex flex-row bd-highlight mb-3 align-items-center">
        <span class="rz-fileupload-choose rz-button btn-secondary">
            <InputFile OnChange="ImportMedias" />
            <span class="rz-button-text">Import Medias File</span>
        </span>
    </div>
}

@code {

    IList<Media> medias;

    [CascadingParameter]
    public EventCallback<(string Title, string Message)> ImportFileCallback { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        medias = ToothPickContext.Medias.OrderByDescending(media => media.DatePublished).ToList();
    }

    private async void ExportMedias()
    {       
        byte[] byteArray = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(ToothPickContext.Medias.ToArray(), Formatting.Indented));
        MemoryStream stream = new MemoryStream(byteArray);
        string fileName = "medias.json";
        using DotNetStreamReference streamReference = new DotNetStreamReference(stream: stream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamReference);
    }

    private async void ImportMedias(InputFileChangeEventArgs inputFileChangeEventArgs)
    {
        if (inputFileChangeEventArgs.FileCount == 1)
        {
            using StreamReader streamReader = new StreamReader(inputFileChangeEventArgs.File.OpenReadStream(maxAllowedSize: (long)2e+9));
            string mediasString = await streamReader.ReadToEndAsync();
            IEnumerable<Media> medias = JsonConvert.DeserializeObject<IEnumerable<Media>>(mediasString);

            foreach (Media newMedia in medias)
            {
                if (ToothPickContext.Libraries.Any(library => library.Name.Equals(newMedia.LibraryName)) &&
                    ToothPickContext.Series.Any(serie => serie.LibraryName.Equals(newMedia.LibraryName) &&
                        serie.Name.Equals(newMedia.SerieName)) &&
                    !ToothPickContext.Medias.Any(media => media.Key.Equals(newMedia.Key)) &&
                    !ToothPickContext.ChangeTracker.Entries<Media>().Any(media => media.Entity.Key.Equals(newMedia.Key)))
                {
                    ToothPickContext.Medias.Add(newMedia);
                }
            }

            if (ToothPickContext.ChangeTracker.HasChanges())
            {
                await ImportFileCallback.InvokeAsync(($"Imported succesfully", 
                    $"Imported medias file \"{inputFileChangeEventArgs.File.Name}\" succesfully! Added {ToothPickContext.ChangeTracker.Entries<Media>().Count(e => e.State == EntityState.Added)} new medias!"));
                await ToothPickContext.SaveChangesAsync();
            }
            else
            {
                await ImportFileCallback.InvokeAsync(($"Nothing imported", $"No new medias were detected. Nothing was imported."));
            }
        }
    }

}